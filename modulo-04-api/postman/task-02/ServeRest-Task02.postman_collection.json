{
	"info": {
		"_postman_id": "43297722-6867-4727-a9fb-46583edd3b52",
		"name": "ServeRest-Task02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29004906"
	},
	"item": [
		{
			"name": "Listar Produtos Cadastrados",
			"item": [
				{
					"name": "CT001 Listar Produtos Já Cadastrados (Cenário Positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se há quantidade\", function () {\r",
									"    pm.expect(response.quantidade).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se há produtos\", function () {\r",
									"    pm.expect(response.produtos).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se quantidade = total de produtos\", function () {\r",
									"    const totalProdutos = response.produtos.length;\r",
									"    pm.expect(response.quantidade).to.eql(totalProdutos);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida os campos de cada produto\", function () {\r",
									"    if (response.produtos.length > 0) {\r",
									"        response.produtos.forEach((produto) => {\r",
									"            pm.expect(produto.nome).to.be.a('string');\r",
									"            pm.expect(produto.preco).to.be.a('number');\r",
									"            pm.expect(produto.descricao).to.be.a('string');\r",
									"            pm.expect(produto.quantidade).to.be.a('number');\r",
									"            pm.expect(produto._id).to.be.a('string');\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT002 Listar Produtos Cadastrados Com Preço Inválidos (Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se todos os campos esperados existem\", function() {\r",
									"    pm.expect(response).to.have.all.keys(\"preco\")\r",
									"});\r",
									"\r",
									"pm.test(\"Valida mensagem preco deve ser numero\", function () {\r",
									"    pm.expect(\"preco deve ser um número\").to.eql(response.preco);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos?preco=R${{$randomInt}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							],
							"query": [
								{
									"key": "preco",
									"value": "R${{$randomInt}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT003 Listar Produtos Cadastrados Quantidade Inválida(Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Código de status é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida mensagem 'quantidade deve ser maior ou igual a 0'\", function () {\r",
									"    pm.expect(response.quantidade).to.eql(\"quantidade deve ser maior ou igual a 0\");\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve ser uma string\", function () {\r",
									"    pm.expect(response.quantidade).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro não deve estar vazia\", function () {\r",
									"    pm.expect(response.quantidade).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve coincidir com a mensagem esperada\", function () {\r",
									"    pm.expect(response.quantidade).to.eql(\"quantidade deve ser maior ou igual a 0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos?quantidade=-{{$randomInt}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							],
							"query": [
								{
									"key": "quantidade",
									"value": "-{{$randomInt}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastrar Produto",
			"item": [
				{
					"name": "CT004 Cadastrar Produto Novo (Cenário Positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se retornou no formato correto\", function() {\r",
									"    pm.expect(produto).to.be.an('object');\r",
									"    pm.expect(produto.message).to.be.a('string');\r",
									"    pm.expect(produto._id).to.be.a('string');\r",
									"    pm.expect(produto.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{produtoNaoExistente}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT005 Cadastrar Produto Sem Autorização (Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve ser uma string\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro não deve estar vazia\", function () {\r",
									"    pm.expect(response.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve corresponder à mensagem esperada\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{produtoNaoExistente}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT006 Cadastrar Produto Já Existente (Cenário Negativo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida a estrutura da resposta\", function () {\r",
									"    pm.expect(produto).to.be.an('object');\r",
									"    pm.expect(produto.message).to.be.a('string');\r",
									"    pm.expect(produto.message).to.eql(\"Já existe produto com esse nome\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo _id não deve estar presente na resposta de erro\", function () {\r",
									"    pm.expect(produto).to.not.have.property(\"_id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{produtoExistente}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Buscar Produto Por ID",
			"item": [
				{
					"name": "CT007 Buscar Produto Com  ID Válido (Cenário Positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar se o produto possui o id esperado\", function () {\r",
									"    pm.expect(produto._id).to.eq(pm.environment.get(\"idExistente\"))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idExistente}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idExistente}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT008 Buscar Produto Com ID Inválido(Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida a estrutura da resposta\", function () {\r",
									"    pm.expect(produto).to.be.an('object');\r",
									"    pm.expect(produto.message).to.be.a('string');\r",
									"    pm.expect(produto.message).to.eql(\"Produto não encontrado\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo _id não deve estar presente na resposta de erro\", function () {\r",
									"    pm.expect(produto).to.not.have.property(\"_id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{$randomAlphaNumeric}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{$randomAlphaNumeric}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CT009 Buscar Produto Com ID Inválido (Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const produto = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida a estrutura da resposta\", function () {\r",
									"    pm.expect(produto).to.be.an('object');\r",
									"    pm.expect(produto.message).to.be.a('string');\r",
									"    pm.expect(produto.message).to.eql(\"Produto não encontrado\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo _id não deve estar presente na resposta de erro\", function () {\r",
									"    pm.expect(produto).to.not.have.property(\"_id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{$randomProduct}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{$randomProduct}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Excluir Produto",
			"item": [
				{
					"name": "CT010 Excluir Produto Cadastrado(Cenário Positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de Registro excluído com sucesso\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.eql(\"Registro excluído com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idExistente}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idExistente}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT011 Excluir Produto Sem Autorização (Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve ser uma string\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro não deve estar vazia\", function () {\r",
									"    pm.expect(response.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve corresponder à mensagem esperada\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idExistente}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idExistente}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT012 Excluir Produto Não Cadastrado (Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de Nenhum registro excluído\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{$randomAlphaNumeric}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{$randomAlphaNumeric}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Editar Produto",
			"item": [
				{
					"name": "CT013 Editar Produto Cadastrado (Cenário Positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica mensagem de registro alterado com sucesso\", function () {\r",
									"    pm.expect(\"Registro alterado com sucesso\").to.eql(response.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{produtoNaoExistente}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idExistente}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idExistente}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT014 Editar Produto Sem Autorização(Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve ser uma string\", function () {\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro não deve estar vazia\", function () {\r",
									"    pm.expect(response.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"A mensagem de erro deve corresponder à mensagem esperada\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{produtoNaoExistente}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idExistente}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idExistente}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT015 Editar Produto Com O Nome existente(Cenário Negativo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida mensagem de que já existe produto\", function () {\r",
									"    pm.expect(\"Já existe produto com esse nome\").to.eql(response.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{produtoExistente}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const getProdutos = {",
					"    url: pm.environment.get(\"baseurl\") + \"/produtos\",",
					"    method: 'GET',",
					"};",
					"pm.sendRequest(getProdutos, function(err, res) {",
					"    pm.expect(err).is.null;",
					"    var nomesProdutos = [];",
					"    var idsProdutos = [];",
					"    const response = res.json();",
					"    const tamanhoProdutos = response.produtos.length;",
					"",
					"    if (tamanhoProdutos > 0) {",
					"        for (let i = 0; i < tamanhoProdutos; i++) {",
					"            const nomeProduto = response.produtos[i].nome;",
					"            const idProduto = response.produtos[i]._id;",
					"            nomesProdutos.push(nomeProduto);",
					"            idsProdutos.push(idProduto);",
					"        }",
					"    }",
					"    const produtoExistente = nomesProdutos[Math.floor(Math.random() * nomesProdutos.length)];",
					"    pm.environment.set(\"produtoExistente\", produtoExistente);",
					"",
					"    let produtoNaoExistente = \"Novo Produto\";",
					"    let tentativas = 0;",
					"    while (nomesProdutos.includes(produtoNaoExistente)) {",
					"        tentativas++;",
					"        produtoNaoExistente = \"Novo Produto \" + tentativas;",
					"    }",
					"    pm.environment.set(\"produtoNaoExistente\", produtoNaoExistente);",
					"",
					"    const idExistente = idsProdutos[Math.floor(Math.random() * idsProdutos.length)];",
					"    pm.environment.set(\"idExistente\", idExistente);",
					"});",
					"",
					"const login = {",
					"    url: pm.environment.get(\"baseurl\") + \"/login\",",
					"    method: 'POST',",
					"    header: {",
					"        \"Content-Type\" : \"application/json\"",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            \"email\" : pm.environment.get(\"email\"),",
					"            \"password\" : pm.environment.get(\"senha\")",
					"        })",
					"    }",
					"};",
					"pm.sendRequest(login, function(err, res) {",
					"    pm.expect(err).is.null;",
					"    const response = res.json();",
					"    const authorization = response.authorization.split(\" \")[1];",
					"    pm.environment.set(\"token\", authorization);",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}